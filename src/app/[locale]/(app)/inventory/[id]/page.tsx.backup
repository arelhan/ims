"use client";

import React, { useEffect, useState } from "react";
import { useParams, useRouter } from "next/navigation";
import QRCodeCanvas from "../../../../components/QRCodeCanvas";

type InventoryItem = {
  id: string;
  name: string;
  description?: string;
  serialNumber?: string;
  category: { id: string; name: string };
  brand: { id: string; name: string };
  status: string;
  assignedTo?: { id: string; name: string };
  createdAt: string;
  updatedAt: string;
  // serviceRecords, auditTrail vs. ileride            <h2 className="text-lg font-bold mb-4">Varlık QR Kodu</h2>
            <div className="bg-white p-4 rounded border mb-4 text-center">
              <QRCodeCanvas
                value={JSON.stringify({
                  itemId: item.id,
                  itemName: item.name,
                  category: item.category.name,
                  brand: item.brand.name,
                  serialNumber: item.serialNumber,
                  assignedTo: item.assignedTo?.name,
                  status: item.status,
                  url: `${typeof window !== "undefined" ? window.location.origin : ''}/inventory/${item.id}`
                })}
                size={180}
              />
              <p className="text-sm text-gray-500 mt-2">
                Bu QR kodu ürün detaylarını içerir
              </p>
export default function InventoryDetailPage() {
  const params = useParams();
  const router = useRouter();
  const id =
    typeof params.id === "string"
      ? params.id
      : Array.isArray(params.id)
        ? params.id[0]
        : "";

  const [item, setItem] = useState<InventoryItem | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Edit mode state
  const [editMode, setEditMode] = useState(false);
  const [form, setForm] = useState({
    name: "",
    description: "",
    serialNumber: "",
  });
  const [saveLoading, setSaveLoading] = useState(false);
  const [saveError, setSaveError] = useState<string | null>(null);

  // Yeniden atama modalı ve kullanıcı listesi
  const [assignModal, setAssignModal] = useState(false);
  const [users, setUsers] = useState<{ id: string; name: string }[]>([]);
  const [usersLoading, setUsersLoading] = useState(false);
  const [assignUserId, setAssignUserId] = useState<string>("");
  const [assignLoading, setAssignLoading] = useState(false);
  const [assignError, setAssignError] = useState<string | null>(null);

  // Hizmet dışı bırak modalı
  const [decommissionModal, setDecommissionModal] = useState(false);
  const [decommissionReason, setDecommissionReason] = useState("");
  const [decommissionLoading, setDecommissionLoading] = useState(false);
  const [decommissionError, setDecommissionError] = useState<string | null>(
    null,
  );

  // Servis kaydı ekleme modalı
  const [serviceModal, setServiceModal] = useState(false);
  const [serviceDesc, setServiceDesc] = useState("");
  const [serviceLoading, setServiceLoading] = useState(false);
  const [serviceError, setServiceError] = useState<string | null>(null);

  // QR kod modalı
  const [qrModal, setQrModal] = useState(false);

  // Fetch inventory item by id
  useEffect(() => {
    if (!id) {
      setError("Geçersiz ID");
      setLoading(false);
      return;
    }
    async function fetchItem() {
      setLoading(true);
      setError(null);
      try {
        const res = await fetch(`/api/inventory?id=${id}`);
        if (!res.ok) throw new Error("Varlık bulunamadı");
        const data = await res.json();
        setItem(data);
        setForm({
          name: data.name || "",
          description: data.description || "",
          serialNumber: data.serialNumber || "",
        });
      } catch (err: any) {
        setError(err.message || "Bir hata oluştu");
      }
      setLoading(false);
    }
    fetchItem();
  }, [id]);

  // Kullanıcı listesini çek (modal açıldığında)
  async function fetchUsers() {
    setUsersLoading(true);
    try {
      const res = await fetch("/api/user");
      if (!res.ok) throw new Error("Kullanıcılar alınamadı");
      const data = await res.json();
      setUsers(data);
      if (data.length > 0) setAssignUserId(data[0].id);
    } catch {
      setUsers([]);
    }
    setUsersLoading(false);
  }

  // Yeniden ata modalını aç
  function openAssignModal() {
    setAssignModal(true);
    fetchUsers();
  }

  // Yeniden atama işlemi
  async function handleAssign(e: React.FormEvent) {
    e.preventDefault();
    if (!item || !assignUserId) return;
    setAssignLoading(true);
    setAssignError(null);
    try {
      const res = await fetch(`/api/inventory?id=${item.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          assignedToId: assignUserId,
          status: "ASSIGNED",
        }),
      });
      if (!res.ok) {
        const data = await res.json();
        throw new Error(data.error || "Atama başarısız");
      }
      const updated = await res.json();
      setItem(updated);
      setAssignModal(false);
    } catch (err: any) {
      setAssignError(err.message || "Bir hata oluştu");
    }
    setAssignLoading(false);
  }

  // Düzenleme kaydet
  async function handleSave(e: React.FormEvent) {
    e.preventDefault();
    if (!item) return;
    setSaveLoading(true);
    setSaveError(null);
    try {
      const res = await fetch(`/api/inventory?id=${item.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: form.name,
          description: form.description,
          serialNumber: form.serialNumber,
        }),
      });
      if (!res.ok) {
        const data = await res.json();
        throw new Error(data.error || "Güncelleme başarısız");
      }
      const updated = await res.json();
      setItem(updated);
      setEditMode(false);
    } catch (err: any) {
      setSaveError(err.message || "Bir hata oluştu");
    }
    setSaveLoading(false);
  }

  if (loading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <span>Yükleniyor...</span>
      </div>
    );
  }

  if (error || !item) {
    return (
      <div className="min-h-screen flex items-center justify-center text-red-600">
        {error || "Varlık bulunamadı"}
      </div>
    );
  }

  return (
    <div className="max-w-3xl mx-auto mt-10 bg-white p-8 rounded shadow">
      <h1 className="text-2xl font-bold mb-4">Varlık Detayı</h1>
      <div className="mb-6">
        <form onSubmit={handleSave}>
          <div className="flex flex-col gap-2">
            <div>
              <span className="font-semibold">Adı:</span>{" "}
              {editMode ? (
                <input
                  className="border px-2 py-1 rounded"
                  value={form.name}
                  onChange={(e) =>
                    setForm((f) => ({ ...f, name: e.target.value }))
                  }
                  required
                />
              ) : (
                item.name
              )}
            </div>
            <div>
              <span className="font-semibold">Kategori:</span>{" "}
              {item.category?.name}
            </div>
            <div>
              <span className="font-semibold">Marka:</span> {item.brand?.name}
            </div>
            <div>
              <span className="font-semibold">Seri No:</span>{" "}
              {editMode ? (
                <input
                  className="border px-2 py-1 rounded"
                  value={form.serialNumber}
                  onChange={(e) =>
                    setForm((f) => ({ ...f, serialNumber: e.target.value }))
                  }
                />
              ) : (
                item.serialNumber || "-"
              )}
            </div>
            <div>
              <span className="font-semibold">Durum:</span>{" "}
              <span
                className={
                  item.status === "ASSIGNED"
                    ? "text-blue-700"
                    : item.status === "DECOMMISSIONED"
                      ? "text-red-600"
                      : "text-gray-700"
                }
              >
                {item.status === "ASSIGNED"
                  ? "Atanmış"
                  : item.status === "DECOMMISSIONED"
                    ? "Hizmet Dışı"
                    : "Depoda"}
              </span>
            </div>
            <div>
              <span className="font-semibold">Atanan Kullanıcı:</span>{" "}
              {item.assignedTo ? item.assignedTo.name : "-"}
            </div>
            <div>
              <span className="font-semibold">Açıklama:</span>{" "}
              {editMode ? (
                <input
                  className="border px-2 py-1 rounded w-full"
                  value={form.description}
                  onChange={(e) =>
                    setForm((f) => ({ ...f, description: e.target.value }))
                  }
                />
              ) : (
                item.description || "-"
              )}
            </div>
            <div>
              <span className="font-semibold">Eklenme Tarihi:</span>{" "}
              {new Date(item.createdAt).toLocaleDateString("tr-TR")}
            </div>
          </div>
          <div className="flex gap-2 mt-4">
            {editMode ? (
              <>
                <button
                  className="bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700"
                  type="submit"
                  disabled={saveLoading}
                >
                  {saveLoading ? "Kaydediliyor..." : "Kaydet"}
                </button>
                <button
                  className="bg-gray-300 px-4 py-2 rounded"
                  type="button"
                  onClick={() => {
                    setEditMode(false);
                    setForm({
                      name: item.name,
                      description: item.description || "",
                      serialNumber: item.serialNumber || "",
                    });
                  }}
                  disabled={saveLoading}
                >
                  Vazgeç
                </button>
                {saveError && (
                  <div className="text-red-600 text-sm mt-2">{saveError}</div>
                )}
              </>
            ) : (
              <>
                <button
                  className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                  type="button"
                  onClick={() => setEditMode(true)}
                >
                  Düzenle
                </button>
                <button
                  className="bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700"
                  type="button"
                  onClick={openAssignModal}
                >
                  Yeniden Ata
                </button>
                <button
                  className="bg-red-600 text-white px-4 py-2 rounded hover:bg-red-700"
                  type="button"
                  onClick={() => setDecommissionModal(true)}
                >
                  Hizmet Dışı Bırak
                </button>
                <button
                  className="bg-yellow-600 text-white px-4 py-2 rounded hover:bg-yellow-700"
                  type="button"
                  onClick={() => setServiceModal(true)}
                >
                  Servis Kaydı Ekle
                </button>
              </>
            )}
          </div>
        </form>
      </div>
      {/* Yeniden Ata Modalı */}
      {assignModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded shadow-lg p-6 w-full max-w-sm">
            <h2 className="text-lg font-bold mb-4">Yeniden Ata</h2>
            {usersLoading ? (
              <div>Kullanıcılar yükleniyor...</div>
            ) : (
              <form onSubmit={handleAssign}>
                <select
                  className="w-full border px-3 py-2 rounded mb-4"
                  value={assignUserId}
                  onChange={(e) => setAssignUserId(e.target.value)}
                >
                  {users.map((u) => (
                    <option key={u.id} value={u.id}>
                      {u.name}
                    </option>
                  ))}
                </select>
                {assignError && (
                  <div className="text-red-600 text-sm mb-2">{assignError}</div>
                )}
                <div className="flex justify-end gap-2">
                  <button
                    className="px-4 py-2 rounded bg-gray-200"
                    type="button"
                    onClick={() => setAssignModal(false)}
                  >
                    Vazgeç
                  </button>
                  <button
                    className="px-4 py-2 rounded bg-blue-600 text-white"
                    type="submit"
                    disabled={assignLoading}
                  >
                    {assignLoading ? "Atanıyor..." : "Ata"}
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
      )}
      {/* Hizmet Dışı Bırak Modalı */}
      {decommissionModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded shadow-lg p-6 w-full max-w-sm">
            <h2 className="text-lg font-bold mb-4">Hizmet Dışı Bırak</h2>
            <form
              onSubmit={async (e) => {
                e.preventDefault();
                if (!item) return;
                setDecommissionLoading(true);
                setDecommissionError(null);
                try {
                  const res = await fetch(`/api/inventory?id=${item.id}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                      status: "DECOMMISSIONED",
                      decommissioned: { reason: decommissionReason },
                    }),
                  });
                  if (!res.ok) {
                    const data = await res.json();
                    throw new Error(data.error || "İşlem başarısız");
                  }
                  const updated = await res.json();
                  setItem(updated);
                  setDecommissionModal(false);
                  setDecommissionReason("");
                } catch (err: any) {
                  setDecommissionError(err.message || "Bir hata oluştu");
                }
                setDecommissionLoading(false);
              }}
            >
              <textarea
                className="w-full border px-3 py-2 rounded mb-4"
                placeholder="Sebep giriniz..."
                value={decommissionReason}
                onChange={(e) => setDecommissionReason(e.target.value)}
                required
              />
              {decommissionError && (
                <div className="text-red-600 text-sm mb-2">
                  {decommissionError}
                </div>
              )}
              <div className="flex justify-end gap-2">
                <button
                  className="px-4 py-2 rounded bg-gray-200"
                  type="button"
                  onClick={() => setDecommissionModal(false)}
                  disabled={decommissionLoading}
                >
                  Vazgeç
                </button>
                <button
                  className="px-4 py-2 rounded bg-red-600 text-white"
                  type="submit"
                  disabled={decommissionLoading}
                >
                  {decommissionLoading ? "İşleniyor..." : "Hizmet Dışı Bırak"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      {/* Servis Kaydı Ekle Modalı */}
      {serviceModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded shadow-lg p-6 w-full max-w-sm">
            <h2 className="text-lg font-bold mb-4">Servis Kaydı Ekle</h2>
            <form
              onSubmit={async (e) => {
                e.preventDefault();
                if (!item) return;
                setServiceLoading(true);
                setServiceError(null);
                try {
                  const res = await fetch(`/api/inventory?id=${item.id}`, {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                      addServiceRecord: {
                        description: serviceDesc,
                      },
                    }),
                  });
                  if (!res.ok) {
                    const data = await res.json();
                    throw new Error(data.error || "İşlem başarısız");
                  }
                  const updated = await res.json();
                  setItem(updated);
                  setServiceModal(false);
                  setServiceDesc("");
                } catch (err: any) {
                  setServiceError(err.message || "Bir hata oluştu");
                }
                setServiceLoading(false);
              }}
            >
              <textarea
                className="w-full border px-3 py-2 rounded mb-4"
                placeholder="Servis açıklaması..."
                value={serviceDesc}
                onChange={(e) => setServiceDesc(e.target.value)}
                required
              />
              {serviceError && (
                <div className="text-red-600 text-sm mb-2">{serviceError}</div>
              )}
              <div className="flex justify-end gap-2">
                <button
                  className="px-4 py-2 rounded bg-gray-200"
                  type="button"
                  onClick={() => setServiceModal(false)}
                  disabled={serviceLoading}
                >
                  Vazgeç
                </button>
                <button
                  className="px-4 py-2 rounded bg-yellow-600 text-white"
                  type="submit"
                  disabled={serviceLoading}
                >
                  {serviceLoading ? "Ekleniyor..." : "Kaydet"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
      {/* QR Kodu Göster Modalı */}
      {qrModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded shadow-lg p-6 w-full max-w-sm flex flex-col items-center">
            <h2 className="text-lg font-bold mb-4">Varlık QR Kodu</h2>
            <div className="bg-white p-4 rounded border mb-4 text-center">
              <QRCodeCanvas
                value={JSON.stringify({
                  itemId: item.id,
                  itemName: item.name,
                  category: item.category.name,
                  brand: item.brand.name,
                  serialNumber: item.serialNumber,
                  assignedTo: item.assignedTo?.name,
                  status: item.status,
                  url: `${typeof window !== "undefined" ? window.location.origin : ''}/inventory/${item.id}`
                })}
                size={180}
              />
              <p className="text-xs text-gray-500 mt-2">
                Bu QR kodu ürün detaylarını içerir
              </p>
            </div>
            <div className="flex gap-2">
              <button
                className="px-4 py-2 rounded bg-blue-600 text-white"
                type="button"
                onClick={() => {
                  // Download QR code as image
                  const canvas = document.querySelector('canvas');
                  if (canvas) {
                    const link = document.createElement('a');
                    link.download = `qr-${item.name.replace(/\s+/g, '-')}.png`;
                    link.href = canvas.toDataURL();
                    link.click();
                  }
                }}
              >
                İndir
              </button>
              <button
                className="px-4 py-2 rounded bg-gray-200"
                type="button"
                onClick={() => setQrModal(false)}
              >
                Kapat
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
