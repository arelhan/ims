"use client";

import React, { useEffect, useState } from "react";
import QRCodeCanvas from "../../../components/QRCodeCanvas";
import DynamicFields from "../../../components/DynamicFields";

// Tipler
type InventoryItem = {
  id: string;
  name: string;
  category: { id: string; name: string };
  brand: { id: string; name: string };
  serialNumber?: string;
  createdAt: string;
};

type Category = { id: string; name: string; fieldTemplate?: any; _count?: { assets: number } };
type Brand = { id: string; name: string };

// Category icons mapping
const getCategoryIcon = (categoryName: string) => {
  const name = categoryName.toLowerCase();
  if (name.includes('laptop') || name.includes('notebook')) {
    return (
      <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 17V7m0 10a2 2 0 01-2 2H5a2 2 0 01-2-2V7a2 2 0 012-2h2a2 2 0 012 2m0 10a2 2 0 002 2h2a2 2 0 002-2M9 7a2 2 0 012-2h2a2 2 0 012 2m0 10V7m0 10a2 2 0 002 2h2a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2h2a2 2 0 002-2z" />
      </svg>
    );
  } else if (name.includes('printer') || name.includes('yazıcı')) {
    return (
      <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 17h2a2 2 0 002-2v-4a2 2 0 00-2-2H5a2 2 0 00-2 2v4a2 2 0 002 2h2m2 4h6a2 2 0 002-2v-4H7v4a2 2 0 002 2zM9 9h6v2H9V9z" />
      </svg>
    );
  } else if (name.includes('monitor') || name.includes('ekran')) {
    return (
      <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
      </svg>
    );
  } else if (name.includes('mouse') || name.includes('fare') || name.includes('keyboard') || name.includes('klavye')) {
    return (
      <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
      </svg>
    );
  } else if (name.includes('server') || name.includes('sunucu')) {
    return (
      <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 12h14M5 12a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v4a2 2 0 01-2 2M5 12a2 2 0 00-2 2v4a2 2 0 002 2h14a2 2 0 002-2v-4a2 2 0 00-2-2m-2-4h.01M17 16h.01" />
      </svg>
    );
  } else if (name.includes('phone') || name.includes('telefon') || name.includes('mobile')) {
    return (
      <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 18h.01M8 21h8a2 2 0 002-2V5a2 2 0 00-2-2H8a2 2 0 00-2 2v14a2 2 0 002 2z" />
      </svg>
    );
  } else if (name.includes('cable') || name.includes('kablo')) {
    return (
      <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1" />
      </svg>
    );
  } else {
    return (
      <svg className="w-8 h-8" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
      </svg>
    );
  }
};

export default function WarehousePage() {
  // State
  const [view, setView] = useState<'categories' | 'items'>('categories');
  const [selectedCategory, setSelectedCategory] = useState<Category | null>(null);
  const [items, setItems] = useState<InventoryItem[]>([]);
  const [categories, setCategories] = useState<Category[]>([]);
  const [brands, setBrands] = useState<Brand[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Yeni varlık ekleme modalı
  const [showModal, setShowModal] = useState(false);
  const [modalStep, setModalStep] = useState<'category' | 'form'>('category');
  const [selectedCategoryForModal, setSelectedCategoryForModal] = useState<Category | null>(null);
  const [form, setForm] = useState({
    name: "",
    description: "",
    categoryId: "",
    brandId: "",
    serialNumber: "",
    location: "",
    purchasePrice: "",
    supplier: "",
    model: "",
    condition: "",
    notes: "",
    specifications: {},
  });
  const [formLoading, setFormLoading] = useState(false);
  const [formError, setFormError] = useState<string | null>(null);

  // Kullanıcıya ata modalı ve kullanıcı listesi
  const [assignModalOpen, setAssignModalOpen] = useState(false);
  const [selectedItem, setSelectedItem] = useState<InventoryItem | null>(null);
  const [users, setUsers] = useState<{ id: string; name: string }[]>([]);
  const [usersLoading, setUsersLoading] = useState(false);
  const [assignUserId, setAssignUserId] = useState<string>("");
  const [assignLoading, setAssignLoading] = useState(false);
  const [assignError, setAssignError] = useState<string | null>(null);

  // QR Code için success modal
  const [showSuccessModal, setShowSuccessModal] = useState(false);
  const [assignedItemData, setAssignedItemData] = useState<{
    item: InventoryItem;
    user: { id: string; name: string };
  } | null>(null);

  // Atanmamış varlıkları çek
  useEffect(() => {
    async function fetchData() {
      setLoading(true);
      setError(null);
      try {
        // Envanterleri çek (assignedToId: null ve status: AVAILABLE olanlar)
        const res = await fetch("/api/inventory");
        if (!res.ok) throw new Error("Envanter verisi alınamadı");
        const allItems: InventoryItem[] = await res.json();
        const unassigned = allItems.filter(
          (item) =>
            (!("assignedToId" in item) ||
              (item as any).assignedToId === null) &&
            (item as any).status === "AVAILABLE",
        );
        setItems(unassigned);

        // Kategorileri çek
        const catRes = await fetch("/api/category");
        if (!catRes.ok) throw new Error("Kategori verisi alınamadı");
        setCategories(await catRes.json());

        // Markaları çek
        const brandRes = await fetch("/api/brand");
        if (!brandRes.ok) throw new Error("Marka verisi alınamadı");
        setBrands(await brandRes.json());
      } catch (err: any) {
        setError(err.message || "Bir hata oluştu");
      }
      setLoading(false);
    }
    fetchData();
  }, []);

  // Kategori seçimi tamamlandığında form adımına geç
  function handleCategorySelect(category: Category) {
    setSelectedCategoryForModal(category);
    setForm(prev => ({
      ...prev,
      categoryId: category.id,
      specifications: {}
    }));
    setModalStep('form');
  }

  // Modal'ı kapat ve reset et
  function closeModal() {
    setShowModal(false);
    setModalStep('category');
    setSelectedCategoryForModal(null);
    setFormError(null);
    setForm({
      name: "",
      description: "",
      categoryId: "",
      brandId: brands[0]?.id || "",
      serialNumber: "",
      location: "",
      purchasePrice: "",
      supplier: "",
      model: "",
      condition: "",
      notes: "",
      specifications: {},
    });
  }

  // Yeni varlık ekle
  async function handleAddAsset(e: React.FormEvent) {
    e.preventDefault();
    setFormLoading(true);
    setFormError(null);
    try {
      const res = await fetch("/api/inventory", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          name: form.name,
          description: form.description,
          categoryId: form.categoryId,
          brandId: form.brandId,
          serialNumber: form.serialNumber,
          location: form.location,
          purchasePrice: form.purchasePrice ? parseFloat(form.purchasePrice) : undefined,
          supplier: form.supplier,
          model: form.model,
          condition: form.condition,
          notes: form.notes,
          specifications: form.specifications,
        }),
      });
      if (!res.ok) {
        const data = await res.json();
        throw new Error(data.error || "Kayıt başarısız");
      }
      // Başarıyla eklendi, listeyi güncelle
      const newItem = await res.json();
      setItems((prev) => [...prev, newItem]);
      closeModal();
    } catch (err: any) {
      setFormError(err.message || "Bir hata oluştu");
    }
    setFormLoading(false);
  }

  // Kullanıcıya ata modalı (gerçek API)
  async function openAssignModal(item: InventoryItem) {
    setSelectedItem(item);
    setAssignModalOpen(true);
    setUsersLoading(true);
    setAssignError(null);
    try {
      const res = await fetch("/api/user");
      if (!res.ok) throw new Error("Kullanıcılar alınamadı");
      const data = await res.json();
      setUsers(data);
      if (data.length > 0) setAssignUserId(data[0].id);
    } catch {
      setUsers([]);
    }
    setUsersLoading(false);
  }
  function closeAssignModal() {
    setAssignModalOpen(false);
    setSelectedItem(null);
    setAssignUserId("");
    setAssignError(null);
  }

  // Kullanıcıya atama işlemi
  async function handleAssign(e: React.FormEvent) {
    e.preventDefault();
    if (!selectedItem || !assignUserId) return;
    setAssignLoading(true);
    setAssignError(null);
    try {
      const res = await fetch(`/api/inventory?id=${selectedItem.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          assignedToId: assignUserId,
          status: "ASSIGNED",
        }),
      });
      if (!res.ok) {
        const data = await res.json();
        throw new Error(data.error || "Atama başarısız");
      }
      // Başarıyla atandıysa listedeki item'ı güncelle ve QR kodu göster
      const updated = await res.json();
      const assignedUser = users.find(u => u.id === assignUserId);
      
      if (assignedUser) {
        setAssignedItemData({
          item: selectedItem,
          user: assignedUser
        });
        setShowSuccessModal(true);
      }
      
      setItems((prev) => prev.filter((i) => i.id !== selectedItem.id));
      closeAssignModal();
    } catch (err: any) {
      setAssignError(err.message || "Bir hata oluştu");
    }
    setAssignLoading(false);
  }

  const filteredItems = selectedCategory 
    ? items.filter(item => item.category && item.category.id === selectedCategory.id)
    : items;

  return (
    <div className="max-w-6xl mx-auto mt-12 px-4">
      <div className="flex justify-between items-center mb-6">
        <div>
          <h1 className="text-3xl font-bold text-gray-800">Depo Yönetimi</h1>
          {view === 'items' && selectedCategory && (
            <div className="flex items-center mt-2 text-sm text-gray-600">
              <button 
                onClick={() => setView('categories')}
                className="hover:text-blue-600 hover:underline"
              >
                Kategoriler
              </button>
              <span className="mx-2">{'>'}</span>
              <span className="font-medium">{selectedCategory.name}</span>
            </div>
          )}
        </div>
        <button
          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 font-semibold flex items-center gap-2 shadow-md"
          onClick={() => {
            setShowModal(true);
            setModalStep('category');
            setSelectedCategoryForModal(null);
            setForm({
              name: "",
              description: "",
              categoryId: "",
              brandId: brands[0]?.id || "",
              serialNumber: "",
              location: "",
              purchasePrice: "",
              supplier: "",
              model: "",
              condition: "",
              notes: "",
              specifications: {},
            });
          }}
        >
          <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
          </svg>
          Yeni Varlık Ekle
        </button>
      </div>

      {error && (
        <div className="bg-red-50 border border-red-200 text-red-600 px-4 py-3 rounded-lg mb-6">
          Hata: {error}
        </div>
      )}

      {loading ? (
        <div className="flex justify-center items-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-2">Yükleniyor...</span>
        </div>
      ) : view === 'categories' ? (
        // Category View
        <div>
          <div className="mb-4">
            <h2 className="text-xl font-semibold text-gray-700">Kategoriler</h2>
            <p className="text-gray-500 text-sm">Bir kategoriye tıklayarak ürünleri görüntüleyin</p>
          </div>
          {categories.length === 0 ? (
            <div className="text-center py-12 text-gray-500">
              <svg className="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
              </svg>
              <p className="text-lg">Henüz kategori eklenmemiş</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
              {categories.map((category) => {
                const categoryItems = items.filter(item => item.category && item.category.id === category.id);
                const itemCount = categoryItems.length;
                
                return (
                  <div
                    key={category.id}
                    onClick={() => {
                      setSelectedCategory(category);
                      setView('items');
                    }}
                    className="bg-white rounded-lg shadow-md hover:shadow-lg transition-shadow cursor-pointer border border-gray-200 overflow-hidden"
                  >
                    <div className="p-6">
                      <div className="flex items-center justify-center w-16 h-16 bg-blue-100 rounded-lg mb-4 text-blue-600 mx-auto">
                        {getCategoryIcon(category.name)}
                      </div>
                      <h3 className="text-lg font-semibold text-gray-800 text-center mb-2">
                        {category.name}
                      </h3>
                      <p className="text-sm text-gray-500 text-center">
                        {itemCount} ürün mevcut
                      </p>
                    </div>
                    <div className="bg-gray-50 px-6 py-3">
                      <div className="flex justify-between items-center text-sm">
                        <span className="text-gray-600">Detay</span>
                        <svg className="w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                        </svg>
                      </div>
                    </div>
                  </div>
                );
              })}
            </div>
          )}
        </div>
      ) : (
        // Items View
        <div>
          <div className="mb-4">
            <h2 className="text-xl font-semibold text-gray-700">
              {selectedCategory?.name} Ürünleri
            </h2>
            <p className="text-gray-500 text-sm">
              {filteredItems.length} atanmamış ürün bulundu
            </p>
          </div>
          {filteredItems.length === 0 ? (
            <div className="text-center py-12 text-gray-500">
              <svg className="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
              </svg>
              <p className="text-lg">Bu kategoride atanmamış ürün bulunmuyor</p>
            </div>
          ) : (
            <div className="bg-white rounded-lg shadow-md overflow-hidden">
              <div className="overflow-x-auto">
                <table className="min-w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Ürün</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Marka</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Seri No</th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Eklenme Tarihi</th>
                      <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">İşlemler</th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredItems.map((item) => (
                      <tr key={item.id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center">
                            <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center mr-3 text-blue-600">
                              {getCategoryIcon(item.category?.name || 'default')}
                            </div>
                            <div>
                              <div className="text-sm font-medium text-gray-900">{item.name}</div>
                              <div className="text-sm text-gray-500">{item.category?.name || 'Kategori yok'}</div>
                            </div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.brand?.name}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {item.serialNumber || "-"}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(item.createdAt).toLocaleDateString("tr-TR")}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                          <button
                            className="bg-blue-600 text-white px-3 py-1 rounded hover:bg-blue-700 text-sm mr-2"
                            onClick={() => openAssignModal(item)}
                          >
                            Kullanıcıya Ata
                          </button>
                          <button
                            className="text-blue-600 hover:text-blue-800 text-sm"
                            onClick={() => window.open(`/inventory/${item.id}`, '_blank')}
                          >
                            Detay
                          </button>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          )}
        </div>
      )}

      {/* Yeni Varlık Ekle Modalı */}
      {showModal && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded shadow-lg p-8 w-full max-w-4xl max-h-[90vh] overflow-y-auto relative">
            <button
              className="absolute top-2 right-2 text-gray-500 hover:text-gray-700"
              onClick={closeModal}
              aria-label="Kapat"
            >
              ×
            </button>
            
            {modalStep === 'category' ? (
              // Step 1: Kategori Seçimi
              <div>
                <h2 className="text-xl font-bold mb-6">Kategori Seçin</h2>
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {categories.map((category) => (
                    <button
                      key={category.id}
                      onClick={() => handleCategorySelect(category)}
                      className="p-6 border border-gray-200 rounded-lg hover:border-blue-500 hover:shadow-lg transition-all group"
                    >
                      <div className="flex flex-col items-center text-center">
                        <div className="text-blue-600 group-hover:text-blue-700 mb-3">
                          {getCategoryIcon(category.name)}
                        </div>
                        <h3 className="font-semibold text-gray-800 mb-2">{category.name}</h3>
                        <p className="text-sm text-gray-500">Kod: {(category as any).code}</p>
                        <div className="mt-2 text-xs text-gray-400">
                          {category._count?.assets || 0} ürün
                        </div>
                      </div>
                    </button>
                  ))}
                </div>
              </div>
            ) : (
              // Step 2: Form
              <div>
                <div className="flex items-center mb-6">
                  <button
                    onClick={() => setModalStep('category')}
                    className="text-blue-600 hover:text-blue-800 mr-4"
                  >
                    ← Geri
                  </button>
                  <h2 className="text-xl font-bold">
                    Yeni {selectedCategoryForModal?.name} Ekle
                  </h2>
                </div>
                
                <form onSubmit={handleAddAsset} className="space-y-4">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block mb-1 font-medium">Ürün Kodu</label>
                      <input
                        type="text"
                        className="w-full border border-gray-300 px-3 py-2 rounded bg-gray-50"
                        value={`${(selectedCategoryForModal as any)?.code}-XXXXXX`}
                        disabled
                        placeholder="Otomatik oluşturulacak"
                      />
                      <p className="text-xs text-gray-500 mt-1">Ürün kodu otomatik oluşturulacak</p>
                    </div>
                    <div>
                      <label className="block mb-1 font-medium">Seri Numarası</label>
                      <input
                        type="text"
                        className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        value={form.serialNumber}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, serialNumber: e.target.value }))
                        }
                      />
                    </div>
                  </div>
                  
                  <div>
                    <label className="block mb-1 font-medium">Açıklama</label>
                    <textarea
                      className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      rows={3}
                      value={form.description}
                      onChange={(e) =>
                        setForm((f) => ({ ...f, description: e.target.value }))
                      }
                    />
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block mb-1 font-medium">Marka*</label>
                      <select
                        className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        value={form.brandId}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, brandId: e.target.value }))
                        }
                        required
                      >
                        <option value="">Marka seçin</option>
                        {brands.map((brand) => (
                          <option key={brand.id} value={brand.id}>
                            {brand.name}
                          </option>
                        ))}
                      </select>
                    </div>
                    <div>
                      <label className="block mb-1 font-medium">Konum</label>
                      <input
                        type="text"
                        className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        value={form.location}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, location: e.target.value }))
                        }
                        placeholder="Raf/Bölüm"
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block mb-1 font-medium">Satın Alma Fiyatı</label>
                      <input
                        type="number"
                        step="0.01"
                        className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        value={form.purchasePrice}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, purchasePrice: e.target.value }))
                        }
                        placeholder="0.00"
                      />
                    </div>
                    <div>
                      <label className="block mb-1 font-medium">Tedarikçi</label>
                      <input
                        type="text"
                        className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        value={form.supplier}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, supplier: e.target.value }))
                        }
                      />
                    </div>
                  </div>
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <div>
                      <label className="block mb-1 font-medium">Model</label>
                      <input
                        type="text"
                        className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        value={form.model}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, model: e.target.value }))
                        }
                      />
                    </div>
                    <div>
                      <label className="block mb-1 font-medium">Durum</label>
                      <select
                        className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                        value={form.condition}
                        onChange={(e) =>
                          setForm((f) => ({ ...f, condition: e.target.value }))
                        }
                      >
                        <option value="">Durum seçin</option>
                        <option value="new">Yeni</option>
                        <option value="used">Kullanılmış</option>
                        <option value="refurbished">Yenilenmiş</option>
                        <option value="damaged">Hasarlı</option>
                      </select>
                    </div>
                  </div>
                  
                  <div>
                    <label className="block mb-1 font-medium">Notlar</label>
                    <textarea
                      className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      rows={2}
                      value={form.notes}
                      onChange={(e) =>
                        setForm((f) => ({ ...f, notes: e.target.value }))
                      }
                    />
                  </div>
                  
                  {/* Dinamik Kategori Alanları */}
                  {selectedCategoryForModal?.fieldTemplate && (
                    <div>
                      <h3 className="text-lg font-semibold mb-3 text-gray-800">
                        {selectedCategoryForModal.name} Özel Alanları
                      </h3>
                      <DynamicFields
                        template={selectedCategoryForModal.fieldTemplate}
                        values={form.specifications}
                        onChange={(specs) => setForm(f => ({ ...f, specifications: specs }))}
                      />
                    </div>
                  )}
                  
                  {formError && (
                    <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
                      {formError}
                    </div>
                  )}
                  
                  <div className="flex justify-end gap-3 pt-4">
                    <button
                      type="button"
                      className="bg-gray-200 text-gray-800 px-4 py-2 rounded hover:bg-gray-300"
                      onClick={closeModal}
                    >
                      İptal
                    </button>
                    <button
                      type="submit"
                      className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                      disabled={formLoading}
                    >
                      {formLoading ? "Ekleniyor..." : "Ekle"}
                    </button>
                  </div>
                </form>
              </div>
            )}
          </div>
        </div>
      )}
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block mb-1 font-medium">Marka*</label>
                  <select
                    className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    value={form.brandId}
                    onChange={(e) =>
                      setForm((f) => ({ ...f, brandId: e.target.value }))
                    }
                    required
                  >
                    <option value="">Marka seçin</option>
                    {brands.map((brand) => (
                      <option key={brand.id} value={brand.id}>
                        {brand.name}
                      </option>
                    ))}
                  </select>
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block mb-1 font-medium">Konum</label>
                  <input
                    type="text"
                    className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    value={form.location}
                    onChange={(e) =>
                      setForm((f) => ({ ...f, location: e.target.value }))
                    }
                    placeholder="Örn: Bilgi İşlem Deposu"
                  />
                </div>
                <div>
                  <label className="block mb-1 font-medium">Satın Alma Fiyatı (₺)</label>
                  <input
                    type="number"
                    step="0.01"
                    className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    value={form.purchasePrice}
                    onChange={(e) =>
                      setForm((f) => ({ ...f, purchasePrice: e.target.value }))
                    }
                    placeholder="0.00"
                  />
                </div>
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label className="block mb-1 font-medium">Tedarikçi</label>
                  <input
                    type="text"
                    className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    value={form.supplier}
                    onChange={(e) =>
                      setForm((f) => ({ ...f, supplier: e.target.value }))
                    }
                    placeholder="Örn: Dell Türkiye"
                  />
                </div>
                <div>
                  <label className="block mb-1 font-medium">Model</label>
                  <input
                    type="text"
                    className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                    value={form.model}
                    onChange={(e) =>
                      setForm((f) => ({ ...f, model: e.target.value }))
                    }
                    placeholder="Örn: OptiPlex 7090"
                  />
                </div>
              </div>
              
              <div>
                <label className="block mb-1 font-medium">Durum</label>
                <select
                  className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  value={form.condition}
                  onChange={(e) =>
                    setForm((f) => ({ ...f, condition: e.target.value }))
                  }
                >
                  <option value="">Durum seçin</option>
                  <option value="Yeni">Yeni</option>
                  <option value="İyi">İyi</option>
                  <option value="Orta">Orta</option>
                  <option value="Eski">Eski</option>
                  <option value="Arızalı">Arızalı</option>
                </select>
              </div>
              
              {/* Dinamik kategori alanları */}
              {form.categoryId && (
                <div className="border-t pt-4">
                  <h3 className="text-lg font-medium mb-3">Kategori Özel Alanları</h3>
                  <DynamicFields
                    template={categories.find(c => c.id === form.categoryId)?.fieldTemplate}
                    values={form.specifications}
                    onChange={(specs) => setForm((f) => ({ ...f, specifications: specs }))}
                  />
                </div>
              )}
              
              <div>
                <label className="block mb-1 font-medium">Notlar</label>
                <textarea
                  className="w-full border border-gray-300 px-3 py-2 rounded focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  rows={3}
                  value={form.notes}
                  onChange={(e) =>
                    setForm((f) => ({ ...f, notes: e.target.value }))
                  }
                  placeholder="Ek bilgiler ve notlar..."
                />
              </div>
              
              {formError && (
                <div className="bg-red-50 border border-red-200 text-red-600 px-3 py-2 rounded">
                  {formError}
                </div>
              )}
              
              <div className="flex gap-3 pt-4">
                <button
                  type="button"
                  className="flex-1 border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50"
                  onClick={() => setShowModal(false)}
                >
                  İptal
                </button>
                <button
                  type="submit"
                  className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition disabled:opacity-50"
                  disabled={formLoading}
                >
                  {formLoading ? "Kaydediliyor..." : "Kaydet"}
                </button>
              </div>
            </form>
          </div>
        </div>
      )}

      {/* Kullanıcıya Ata Modalı (Gerçek API) */}
      {assignModalOpen && selectedItem && (
        <div className="fixed inset-0 bg-black bg-opacity-30 flex items-center justify-center z-50">
          <div className="bg-white rounded shadow-lg p-6 w-full max-w-sm">
            <h2 className="text-lg font-bold mb-4">
              {selectedItem.name} için kullanıcıya ata
            </h2>
            {usersLoading ? (
              <div>Kullanıcılar yükleniyor...</div>
            ) : (
              <form onSubmit={handleAssign}>
                <div className="mb-4">
                  <label className="block mb-1 font-medium">
                    Kullanıcı Seç
                  </label>
                  <select
                    className="w-full border px-3 py-2 rounded"
                    value={assignUserId}
                    onChange={(e) => setAssignUserId(e.target.value)}
                  >
                    {users.map((u) => (
                      <option key={u.id} value={u.id}>
                        {u.name}
                      </option>
                    ))}
                  </select>
                </div>
                {assignError && (
                  <div className="text-red-600 text-sm mb-2">{assignError}</div>
                )}
                <div className="flex justify-end gap-2">
                  <button
                    className="px-4 py-2 rounded bg-gray-200"
                    type="button"
                    onClick={closeAssignModal}
                    disabled={assignLoading}
                  >
                    Vazgeç
                  </button>
                  <button
                    className="px-4 py-2 rounded bg-blue-600 text-white"
                    type="submit"
                    disabled={assignLoading}
                  >
                    {assignLoading ? "Atanıyor..." : "Ata"}
                  </button>
                </div>
              </form>
            )}
          </div>
        </div>
      )}

      {/* Success Modal with QR Code */}
      {showSuccessModal && assignedItemData && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg shadow-lg p-8 w-full max-w-md mx-4">
            <div className="text-center">
              <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              </div>
              <h2 className="text-xl font-bold text-gray-800 mb-2">Atama Başarılı!</h2>
              <p className="text-gray-600 mb-6">
                <span className="font-medium">{assignedItemData.item.name}</span> ürünü{' '}
                <span className="font-medium">{assignedItemData.user.name}</span> kullanıcısına atandı.
              </p>
              
              <div className="bg-gray-50 rounded-lg p-4 mb-6">
                <h3 className="text-sm font-medium text-gray-700 mb-3">QR Kodu</h3>
                <div className="flex justify-center">
                  <QRCodeCanvas 
                    value={JSON.stringify({
                      itemId: assignedItemData.item.id,
                      itemName: assignedItemData.item.name,
                      category: assignedItemData.item.category?.name || 'Kategori yok',
                      brand: assignedItemData.item.brand?.name || 'Marka yok',
                      serialNumber: assignedItemData.item.serialNumber,
                      assignedTo: assignedItemData.user.name,
                      assignedDate: new Date().toISOString(),
                      url: `${window.location.origin}/inventory/${assignedItemData.item.id}`
                    })}
                    size={150}
                  />
                </div>
                <p className="text-xs text-gray-500 mt-2">
                  Bu QR kodu ürün detaylarını içerir
                </p>
              </div>

              <div className="flex gap-3">
                <button
                  className="flex-1 bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700"
                  onClick={() => {
                    // Download QR code as image
                    const canvas = document.querySelector('canvas');
                    if (canvas) {
                      const link = document.createElement('a');
                      link.download = `qr-${assignedItemData.item.name.replace(/\s+/g, '-')}.png`;
                      link.href = canvas.toDataURL();
                      link.click();
                    }
                  }}
                >
                  QR Kodu İndir
                </button>
                <button
                  className="flex-1 border border-gray-300 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-50"
                  onClick={() => {
                    setShowSuccessModal(false);
                    setAssignedItemData(null);
                  }}
                >
                  Kapat
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
